- Architecture is the very top level of design. Architecture is something that cannot be fixed once implemented. Architects are the link between idea and reality.

- Software architecture is all about breaking up larger systems into smaller focused systems. Good architecture allows for faster development and smarter task allocation, reduces overall idle time.

- Pipe and Filter Pattern: Decompose a task that performs complex processing into a series of separate elements that can be reused. Doing so can improve performance, scalability, and reusability by allowing task elements that perform the processing to be deployed and scaled independently. This pattern is used to process data step by step, with each step (filter) performing a specific transformation or operation on the data. Data flows through a series of connected filters, like water flowing through pipes.

- Client Server Pattern: This pattern involves two separate entities â€“ a client and a server. The client sends requests to the server, which processes those requests and sends back responses. It's a fundamental pattern for networked applications.

- Master Slave Pattern: In this pattern, there is a single master component that delegates tasks to multiple slave components. The master coordinates and manages the overall workflow.  For instance, a "User Controller" might delegate user-related actions like registration, login, and profile management to dedicated slave controllers.

- Layered Pattern: This pattern organizes your application into distinct layers or tiers, each responsible for a specific aspect of functionality. Typically, these layers include presentation, business logic, and data storage.

- MVC Pattern: Model View Controller.

- Microservice Pattern: The Microservices Pattern is a software architectural style that structures an application as a collection of small, loosely coupled, and independently deployable services. Each service focuses on a specific business capability and communicates with others through APIs